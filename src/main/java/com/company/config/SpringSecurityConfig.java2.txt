package com.company.config;

import com.company.security.CustomPermissionEvaluator;
import com.company.security.CustomSecurityFilter;
import com.company.security.CustomAuthenticationProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;
import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.authentication.logout.LogoutFilter;

@EnableGlobalMethodSecurity(jsr250Enabled = true, prePostEnabled = true)
public class SpringSecurityConfig extends GlobalMethodSecurityConfiguration {

    @Override
    protected MethodSecurityExpressionHandler createExpressionHandler() {
        DefaultMethodSecurityExpressionHandler expressionHandler = new DefaultMethodSecurityExpressionHandler();
        expressionHandler.setPermissionEvaluator(new CustomPermissionEvaluator());
        return expressionHandler;
    }

    @Configuration
    public static class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        @Autowired
        private CustomAuthenticationProvider authenticationProvider;

        // See https://spring.io/guides/topicals/spring-security-architecture
        @Override
        protected void configure(HttpSecurity http) throws Exception {

    //        http.httpBasic();
            http.addFilterAfter(new CustomSecurityFilter(authenticationProvider), LogoutFilter.class);
            http.authorizeRequests()
                    .anyRequest().permitAll() // allow all requests
                    .and().csrf().disable(); // and remember to disable CSRF for post/put requests
        }

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.authenticationProvider(authenticationProvider);

    //        auth.inMemoryAuthentication()
    //                .withUser("user").password("password").roles("USER")
    //                .and()
    //                .withUser("admin").password("password").roles("ADMIN");
        }

    }
}
